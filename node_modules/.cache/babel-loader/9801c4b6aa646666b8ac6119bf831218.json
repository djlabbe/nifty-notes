{"ast":null,"code":"import \"source-map-support/register\";\nimport * as dynamoDbLib from \"./libs/dynamodb-lib\";\nimport { success, failure } from \"./libs/response-lib\";\nexport async function main(event, context) {\n  const params = {\n    TableName: \"notes\",\n    Key: {\n      userId: event.requestContext.identity.cognitoIdentityId,\n      noteId: event.pathParameters.id\n    }\n  };\n\n  try {\n    const result = await dynamoDbLib.call(\"get\", params);\n\n    if (result.Item) {\n      // Return item\n      return success(result.Item);\n    } else {\n      return failure({\n        status: false,\n        error: \"Item not found.\"\n      });\n    }\n  } catch (e) {\n    return failure({\n      status: false\n    });\n  }\n}","map":{"version":3,"sources":["/Users/dlabbe/Developer/nifty-notes/get.js"],"names":["dynamoDbLib","success","failure","main","event","context","params","TableName","Key","userId","requestContext","identity","cognitoIdentityId","noteId","pathParameters","id","result","call","Item","status","error","e"],"mappings":";AAAA,OAAO,KAAKA,WAAZ,MAA6B,qBAA7B;AACA,SAAQC,OAAR,EAAiBC,OAAjB,QAA+B,qBAA/B;AAEA,OAAO,eAAeC,IAAf,CAAoBC,KAApB,EAA2BC,OAA3B,EAAoC;AACzC,QAAMC,MAAM,GAAG;AACbC,IAAAA,SAAS,EAAE,OADE;AAEbC,IAAAA,GAAG,EAAE;AACHC,MAAAA,MAAM,EAAEL,KAAK,CAACM,cAAN,CAAqBC,QAArB,CAA8BC,iBADnC;AAEHC,MAAAA,MAAM,EAAET,KAAK,CAACU,cAAN,CAAqBC;AAF1B;AAFQ,GAAf;;AAQA,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMhB,WAAW,CAACiB,IAAZ,CAAiB,KAAjB,EAAwBX,MAAxB,CAArB;;AACA,QAAIU,MAAM,CAACE,IAAX,EAAiB;AACf;AACA,aAAOjB,OAAO,CAACe,MAAM,CAACE,IAAR,CAAd;AACD,KAHD,MAGO;AACL,aAAOhB,OAAO,CAAC;AAAEiB,QAAAA,MAAM,EAAE,KAAV;AAAiBC,QAAAA,KAAK,EAAE;AAAxB,OAAD,CAAd;AACD;AACF,GARD,CAQE,OAAOC,CAAP,EAAU;AACV,WAAOnB,OAAO,CAAC;AAACiB,MAAAA,MAAM,EAAE;AAAT,KAAD,CAAd;AACD;AACF","sourcesContent":["import * as dynamoDbLib from \"./libs/dynamodb-lib\";\nimport {success, failure} from \"./libs/response-lib\";\n\nexport async function main(event, context) {\n  const params = {\n    TableName: \"notes\",\n    Key: {\n      userId: event.requestContext.identity.cognitoIdentityId,\n      noteId: event.pathParameters.id\n    }\n  };\n\n  try {\n    const result = await dynamoDbLib.call(\"get\", params);\n    if (result.Item) {\n      // Return item\n      return success(result.Item);\n    } else {\n      return failure({ status: false, error: \"Item not found.\" });\n    }\n  } catch (e) {\n    return failure({status: false});\n  }\n}\n"]},"metadata":{},"sourceType":"module"}